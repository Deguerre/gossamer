// Define this macro to test the installed Boost bzip2 filter.
//
#undef TEST_INSTALLED_BOOST_INSTANCE

#include <iostream>
#include <fstream>
#include <sstream>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/copy.hpp>

#ifdef TEST_INSTALLED_BOOST_INSTANCE
#include <boost/iostreams/filter/bzip2.hpp>
#define BZIP2_NAMESPACE ::boost::iostreams
#else
#include "BzipFilter.hh"
#define BZIP2_NAMESPACE ::Gossamer
#endif


using namespace std;
using namespace boost::iostreams;

#define GOSS_TEST_MODULE BzipFilter
#include "testBegin.hh"

std::string
decompressString(const uint8_t* pBegin, size_t pLen, size_t pBufSize = 4096)
{
    string input(pBegin, pBegin + pLen);
    stringstream istring(input, ios_base::in | ios_base::binary);
    filtering_istream in;
    in.push(BZIP2_NAMESPACE::bzip2_decompressor(false, pBufSize));
    in.push(istring);

    stringstream out(ios_base::out | ios_base::binary);
    copy(in, out);

    return out.str();
}

#if 1
static uint8_t
bzipFile[] = {
 0x42, 0x5a, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
 0x53, 0x59, 0x11, 0x98, 0x07, 0x8c, 0x00, 0x06,
 0xe6, 0xc2, 0x00, 0xc0, 0x00, 0x20, 0x00, 0x00,
 0x08, 0x20, 0x00, 0x30, 0xcc, 0x09, 0xaa, 0x69,
 0x91, 0x42, 0x6d, 0x50, 0xa1, 0x3c, 0x5d, 0xc9,
 0x14, 0xe1, 0x42, 0x40, 0x46, 0x60, 0x1e, 0x30
};

BOOST_AUTO_TEST_CASE(test_bzip)
{
    string output = decompressString(bzipFile, sizeof(bzipFile));

    BOOST_CHECK_EQUAL(output.size(), 901000);

    size_t c = 0;
    for (string::const_iterator ii = output.begin(); ii != output.end(); ++ii)
    {
        BOOST_CHECK_EQUAL(*ii, '\0');
        ++c;
    }
}

static uint8_t
bzipFilePlusRubbish[] = {
 0x42, 0x5a, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
 0x53, 0x59, 0x11, 0x98, 0x07, 0x8c, 0x00, 0x06,
 0xe6, 0xc2, 0x00, 0xc0, 0x00, 0x20, 0x00, 0x00,
 0x08, 0x20, 0x00, 0x30, 0xcc, 0x09, 0xaa, 0x69,
 0x91, 0x42, 0x6d, 0x50, 0xa1, 0x3c, 0x5d, 0xc9,
 0x14, 0xe1, 0x42, 0x40, 0x46, 0x60, 0x1e, 0x30,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

BOOST_AUTO_TEST_CASE(test_bzip_plus_rubbish)
{
    try {
        string output = decompressString(bzipFilePlusRubbish,
                                         sizeof(bzipFilePlusRubbish));
    }
    catch (std::exception err)
    {
        return;
    }

    BOOST_CHECK(false);
}
#endif

#if 0
static uint8_t
pbzipFile[] = {
 0x42, 0x5a, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
 0x53, 0x59, 0x63, 0xe3, 0xec, 0xa2, 0x00, 0x06,
 0xe4, 0xc1, 0x00, 0xc0, 0x00, 0x02, 0x00, 0x00,
 0x08, 0x20, 0x00, 0x30, 0xcc, 0x09, 0xaa, 0x69,
 0x94, 0xa1, 0x36, 0xa9, 0x28, 0x4f, 0x17, 0x72,
 0x45, 0x38, 0x50, 0x90, 0x63, 0xe3, 0xec, 0xa2,
 0x42, 0x5a, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
 0x53, 0x59, 0x01, 0xe8, 0xd0, 0x60, 0x00, 0x00,
 0x01, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x80, 0x00,
 0x08, 0x20, 0x00, 0x20, 0xaa, 0x6d, 0x41, 0x98,
 0xba, 0x83, 0xc5, 0xdc, 0x91, 0x4e, 0x14, 0x24,
 0x00, 0x7a, 0x34, 0x18, 0x00
};

BOOST_AUTO_TEST_CASE(test_pbzip)
{
    string output = decompressString(pbzipFile, sizeof(pbzipFile), 50);

    BOOST_CHECK_EQUAL(output.size(), 901000);

    size_t c = 0;
    for (string::const_iterator ii = output.begin(); ii != output.end(); ++ii)
    {
        BOOST_CHECK_EQUAL(*ii, '\0');
        ++c;
    }
}
#endif

#include "testEnd.hh"
